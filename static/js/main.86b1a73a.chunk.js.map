{"version":3,"sources":["graphql/Queries.tsx","components/Continent.tsx","components/Continents.tsx","Pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_CONTINENTS","gql","GET_CONTINENT","Continent","code","useParams","useState","name","emoji","countries","continent","setContinent","useQuery","variables","loading","error","data","useEffect","style","display","gridTemplateColumns","gridTemplateRows","gap","gridAutoFlow","gridTemplateAreas","map","country","countryLanguages","languages","language","slice","border","marginBottom","marginTop","Continents","path","useRouteMatch","continents","item","index","to","flexDirection","alignContent","width","height","alignItems","justifyContent","flexWrap","Home","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","className","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86b1a73a.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_CONTINENTS = gql`\n  query {\n    continents {\n      name\n      code\n    }\n  }\n`;\n\nexport const GET_CONTINENT = gql`\n  query continent($code: ID!) {\n    continent(code: $code) {\n      name\n      countries {\n        name\n        emoji\n        languages {\n          name\n        }\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_CONTINENT } from '../graphql/Queries';\n\ninterface CountryType {\n  name: string;\n  emoji: {};\n  languages: {};\n}\ninterface LanguageType {\n  name: string;\n}\n\nfunction Continent() {\n  let { code } = useParams<{ code?: string }>();\n\n  const [continent, setContinent] = useState({\n    name: '',\n    emoji: {},\n    countries: [],\n  });\n  const { loading, error, data } = useQuery(GET_CONTINENT, {\n    variables: { code },\n  });\n\n  useEffect(() => {\n    if (data) {\n      setContinent({\n        name: data.continent.name,\n        emoji: data.continent.emoji,\n        countries: data.continent.countries,\n      });\n    }\n    return () => {\n      setContinent({ name: '', emoji: {}, countries: [] });\n    };\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '1fr 1fr 1fr',\n        gap: '30px 15px',\n        gridAutoFlow: 'row',\n        gridTemplateAreas: `\n          \". . .\"\n          \". . .\"\n          \". . .\"\n        `,\n      }}\n    >\n      {continent.countries.map((country: CountryType) => {\n        let countryLanguages: LanguageType = country.languages\n          // @ts-ignore: Unreachable code error\n          .map((language: LanguageType) => language.name)\n          .slice(0, 1);\n\n        return (\n          <div key={country.name} style={{ border: '1px solid black' }}>\n            <div>{country.name}</div>\n            <div style={{ marginBottom: '10px', marginTop: '10px' }}>\n              {country.emoji}\n            </div>\n            {countryLanguages}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Continent;\n","import React from 'react';\nimport { Link, Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_CONTINENTS } from '../graphql/Queries';\nimport Continent from './Continent';\n\ninterface ContinentsType {\n  name: string;\n  code: string;\n  countries: Object[];\n}\n\nfunction Continents() {\n  let { path } = useRouteMatch();\n\n  const { loading, error, data } = useQuery(GET_CONTINENTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const continents = data.continents.map(\n    (item: ContinentsType, index: number) => (\n      <Link\n        key={index}\n        to={`/continents/${item.code}`}\n        style={{\n          border: '1px solid black',\n          display: 'flex',\n          flexDirection: 'column',\n          alignContent: 'center',\n          width: '100px',\n          height: '100px',\n        }}\n      >\n        <div\n          style={{\n            height: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          {item.name}\n        </div>\n        <div\n          style={{\n            height: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          {item.code}\n        </div>\n      </Link>\n    )\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n      }}\n    >\n      {continents}\n      <div style={{ width: '100%', marginTop: '50px' }}>\n        <Switch>\n          <Route path={`${path}/:code`}>\n            <Continent />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Continents;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  return <Link to='/continents'>All Continents</Link>;\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nimport Continent from './components/Continent';\nimport Continents from './components/Continents';\nimport Home from './Pages/Home';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <div className='App'>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/continents' component={Continents} />\n            <Route path='/continents/:code' component={Continent} />\n          </Switch>\n        </div>\n      </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}